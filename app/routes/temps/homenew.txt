import type { Route } from "./+types/home";
import Header from "./Header/Header";
import React, { useEffect, useState } from "react";
import NAVBAR from "../../shared/components/nav/NAVBAR";

export function meta() {
  return [
    { title: "Arbor -The Social Marketplace" },
    { name: "description", content: "Connect and create with community" },
  ];
}

import { Form, useLoaderData, useActionData, useFetcher } from "react-router";
import { Button } from "~/components/ui/button";
import postDetails from "../../shared/database/TEMPData/PostData";

import { CloudinaryUpload } from "./cloudUpload";

import {
  addDoc,
  collection,
  doc,
  getDoc,
  getDocs,
  query,
} from "firebase/firestore";
import { db } from "shared/database/firebase";

// //fixed sidebars
import LeftSidebar from "../../shared/components/fixedsidebar/Leftsidebar/LeftSidebar";
import MiddleSidebar from "../../shared/components/fixedsidebar/Middleside/MiddlwSidebar";
import RightSidebar from "../../shared/components/fixedsidebar/RightSide/RightSidebar";
import { CheckCircleIcon, UploadIcon, XIcon } from "lucide-react";
import type { Post } from "shared/types/post";


// const User_Avatar_image = ()=> RandomAvatar();
const User_Avatar_image = "https://res.cloudinary.com/dkxicfpye/image/upload/v1742461554/ifwnkigstnfx5vwdu8la.jpg";
console.log("User Avatar image is : ", User_Avatar_image);



export async function loader() {
  //and when load it using loader then fetch its dbid and post data

  const querySnapshotPostData = await getDocs(collection(db, "posts"));

  
  
  const AllPosts = querySnapshotPostData.docs.map((doc) => {
    const fetchedData = { dbid: doc.id, PostData: doc.data() };
    const postdata = { ...fetchedData.PostData, id: doc.id };
   

    return postdata;
  });
  console.log("All posts are : ", AllPosts);
  return { posts: AllPosts };
}




export async function action({ request }: Route.ClientActionArgs) {
  //when inserting into the db no dbid is present as it only generate after the data pushed into the db
  //so when user post a  img just take sample id and put  dbid as empty string
  //and when load it using loader then fetch its dbid and post data

  const formData = await request.formData();

  const imageUrlfromCloudinary = await CloudinaryUpload(formData);
  console.log("Image URL in cloudinary is :", imageUrlfromCloudinary);
// const imgResponse = await fetch(avturlapi);
//       const imgBlob = await imgResponse.blob();
//   const User_Avatar_image = await Cloudinary_Avatar_Upload(imgBlob);
const user_avatar_url = User_Avatar_image;
  const newPost = {
    dbid: "",
    id: postDetails.length + 1,
    avatarUrl: user_avatar_url,
    description:
      formData.get("Product-Description")?.toString() || "No description",
    tags: (formData.get("Tags")?.toString() || "")
      .split(",")
      .map((t) => t.trim()),
    price: `${formData.get("Price")?.toString() || "0"}`,
    productName: formData.get("Product-Name")?.toString() || "Unnamed Product",
    imageUrl: imageUrlfromCloudinary,
    isliked: false,
    likes: 0,
    comments: 0,
  };

  try {
    const docRef = await addDoc(collection(db, "posts"), newPost);
    console.log("Document written with ID: ", docRef.id);

    postDetails.push(newPost);

    // Return success instead of redirecting
    return {
      success: true,
      message: "Post created successfully!",
      // Add redirect header
      headers: {
        Location: "/",
      },
    };
  } catch (error) {
    console.error("Error adding document: ", error);
    return {
      success: false,
      message: "Failed to create post",
      headers: {
        Location: "/",
      },
    };
  }
}

export default function Home() {
  const { posts } = useLoaderData() as { posts: Post[] };
  console.log("now the post with their dbid are home mai : ", posts);

  return (
    <div className="h-dvh  w-full mb-4">
      <Header />
      <NAVBAR />
      
      <div className="flex w-full mt-10 min-h-screen">
        <LeftSidebar username="" className="flex-shrink-0" />
        <MiddleSidebar posts={posts} className="flex-grow" />
        <RightSidebar className="flex-shrink-0" />
      </div>
    </div>
  );
}

// function CreatePostCard() {
//   const [previewImage, setPreviewImage] = useState<string | null>(null);
//   const [productDescription, setProductDescription] = useState<string>("");
//   const [productName, setProductName] = useState<string>("");
//   const [tags, setTags] = useState<string>("");
//   const [price, setPrice] = useState<number | string>("");
//   const [image, setImage] = useState<File | null>(null);
//   const [avatarUrl, setAvatarUrl] = useState<string>(User_Avatar_image); // Add state for avatar URL

//   // Get action data to check if form was submitted successfully
//   const actionData = useActionData<{ success: boolean; message: string }>();
//   console.log("Action data is : ", actionData);

//   // Reset form when submission is successful
//   useEffect(() => {
//     if (actionData?.success) {
//       setPreviewImage(null);
//       setProductDescription("");
//       setProductName("");
//       setTags("");
//       setPrice("");
//       setImage(null);

//       // Reset file input DOM element
//       const fileInput = document.getElementById(
//         "image-upload"
//       ) as HTMLInputElement;
//       if (fileInput) fileInput.value = "";
//     }
//   }, [actionData]);


//   const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     const file = e.target.files?.[0];
//     if (file) {
//       setPreviewImage(URL.createObjectURL(file));
//       setImage(file);
//     }
//   };

//   return (
//     <Form
//       method="post"
//       encType="multipart/form-data"
//       about="/"

//       className="mb-6 bg-white rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-orange-200"
//     >
//       <div className="p-6">
//       {/* Success/Error Messages */}
//       {actionData?.message && (
//         <div
//         className={`mb-6 p-4 rounded-lg flex items-center gap-3 ${
//           actionData.success
//           ? "bg-green-100 text-green-800"
//           : "bg-red-100 text-red-800"
//         }`}
//         >
//         {actionData?.message && <CheckCircleIcon className="w-5 h-5" />}
//         <span>{actionData?.message}</span>
//         </div>
//       )}

//       {/* Author Section */}
//       <div className="flex items-center gap-4 mb-6 p-4 bg-purple-50 rounded-xl">
//         <img
//         // src="https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50"
//         src={avatarUrl ?? ""} // Use the avatarUrl state with fallback
//         className="w-14 h-14 rounded-full border-2 border-purple-200"
//         alt="User"
//         />
//         <textarea
//         name="Product-Description"
//         placeholder="Share your creation with the community..."
//         className="flex-1 p-3 text-lg bg-transparent focus:outline-none placeholder-gray-400 resize-none"
//         rows={2}
//         onChange={(e) => setProductDescription(e.target.value)}
//         value={productDescription}
//         />
//       </div>

//       {/* Form Grid */}
//       <div className="space-y-4 mb-6">
//         <div className="relative">
//         <input
//           type="text"
//           name="Product-Name"
//           placeholder=" "
//           className="w-full p-4 pt-6 bg-gray-50 rounded-lg border border-gray-200 focus:border-purple-400 focus:ring-2 focus:ring-purple-100 peer"
//           onChange={(e) => setProductName(e.target.value)}
//           value={productName}
//         />
//         <label htmlFor="productName" className="absolute top-2 left-4 text-sm text-gray-500 pointer-events-none transition-all peer-focus:text-purple-600">
//           Product Name
//         </label>
//         </div>

//         <div className="grid grid-cols-2 gap-4">
//         <div className="relative">
//           <input
//           type="number"
//           name="Price"
//           placeholder=" "
//           className="w-full p-4 pt-6 bg-gray-50 rounded-lg border border-gray-200 focus:border-purple-400 focus:ring-2 focus:ring-purple-100 peer"
//           step="0.01"
//           onChange={(e) => setPrice(e.target.value)}
//           value={price}
//           />
//           <label htmlFor="price" className="absolute top-2 left-4 text-sm text-gray-500 pointer-events-none transition-all peer-focus:text-purple-600">
//           Price ($)
//           </label>
//           <span className="absolute right-4 top-5 text-gray-400">$</span>
//         </div>

//         <div className="relative">
//           <input
//           type="text"
//           name="Tags"
//           placeholder=" "
//           className="w-full p-4 pt-6 bg-gray-50 rounded-lg border border-gray-200 focus:border-purple-400 focus:ring-2 focus:ring-purple-100 peer"
//           onChange={(e) => setTags(e.target.value)}
//           value={tags}
//           />
//           <label htmlFor="tags" className="absolute top-2 left-4 text-sm text-gray-500 pointer-events-none transition-all peer-focus:text-purple-600">
//           Tags (comma separated)
//           </label>
//         </div>
//         </div>

//         {/* File Upload */}
//         <div className="relative group">
//         <input
//           type="file"
//           name="postimage"
//           onChange={handleImageChange}
//           className="absolute opacity-0 w-full h-full cursor-pointer"
//           id="image-upload"
//           accept="image/*"
//         />
//         <label
//           htmlFor="image-upload"
//           className="block p-8 text-center border-2 border-dashed border-gray-200 rounded-lg bg-gray-50 hover:border-purple-300 group-active:border-purple-400 transition-colors cursor-pointer"
//         >
//           <div className="space-y-2">
//           <UploadIcon className="w-8 h-8 text-purple-500 mx-auto" />
//           <p className="text-gray-600 font-medium">
//             Drag & drop or click to upload
//           </p>
//           <p className="text-sm text-gray-400">PNG, JPG up to 5MB</p>
//           </div>
//         </label>
//         </div>
//       </div>

//       {/* Image Preview */}
//       {previewImage && (
//         <div className="mb-6 relative group">
//         <img
//           src={previewImage}
//           alt="Preview"
//           className="w-full h-48 object-cover rounded-xl border border-gray-100 shadow-sm transition-transform group-hover:scale-105"
//         />
//         <button
//           type="button"
//           onClick={() => setPreviewImage("")}
//           className="absolute top-2 right-2 p-2 bg-white/90 backdrop-blur-sm rounded-full shadow-sm hover:shadow-md transition-all"
//         >
//           <XIcon className="w-5 h-5 text-gray-600" />
//         </button>
//         </div>
//       )}

//       {/* Form Actions */}
//       <div className="flex justify-between items-center pt-4 border-t border-gray-100">
//         <button
//         type="button"
//         onClick={() => {
//           setPreviewImage("");
//           setProductDescription("");
//           setProductName("");
//           setTags("");
//           setPrice("");
//           setImage(null);
//         }}
//         className="px-5 py-2.5 text-gray-500 hover:text-gray-700 transition-colors flex items-center gap-2"
//         >
//         <XIcon className="w-5 h-5" />
//         Clear Form
//         </button>
//         <Button
//         type="submit"
//         className="bg-gradient-to-br from-purple-600 to-orange-600 hover:from-purple-700 hover:to-orange-700 text-white px-8 py-2.5 rounded-lg shadow-sm hover:shadow-lg transition-all"
//         >
//         Publish Post
//         </Button>
//       </div>
//       </div>
//     </Form>
//   );
// }

function CreatePostCard() {
  const fetcher = useFetcher();
  const [previewImage, setPreviewImage] = React.useState<string | null>(null);
  const [formData, setFormData] = React.useState({
    description: '',
    productName: '',
    tags: '',
    price: '',
  });

  const isSubmitting = fetcher.state !== "idle";

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setPreviewImage(URL.createObjectURL(file));
    }
  };

  const handleClearForm = () => {
    setFormData({ description: '', productName: '', tags: '', price: '' });
    setPreviewImage(null);
  };

  return (
    <fetcher.Form method="post" action="/" encType="multipart/form-data" className="mb-6 bg-white rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-orange-200">
      <div className="p-6">
        {fetcher.data?.message && (
          <div className={`mb-6 p-4 rounded-lg flex items-center gap-3 ${fetcher.data.success ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}>
            <CheckCircleIcon className="w-5 h-5" />
            <span>{fetcher.data.message}</span>
          </div>
        )}

        <div className="flex items-center gap-4 mb-6 p-4 bg-purple-50 rounded-xl">
          <img src={User_Avatar_image} className="w-14 h-14 rounded-full border-2 border-purple-200" alt="User" />
          <textarea
            name="description"
            placeholder="Share your creation with the community..."
            className="flex-1 p-3 text-lg bg-transparent focus:outline-none placeholder-gray-400 resize-none"
            value={formData.description}
            onChange={handleInputChange}
          />
        </div>

        <div className="space-y-4 mb-6">
          <input
            type="text"
            name="productName"
            placeholder="Product Name"
            className="w-full p-4 bg-gray-50 rounded-lg border border-gray-200 focus:border-purple-400 focus:ring-2 focus:ring-purple-100"
            value={formData.productName}
            onChange={handleInputChange}
          />
          <div className="grid grid-cols-2 gap-4">
            <input
              type="number"
              name="price"
              placeholder="Price ($)"
              className="w-full p-4 bg-gray-50 rounded-lg border border-gray-200 focus:border-purple-400 focus:ring-2 focus:ring-purple-100"
              value={formData.price}
              onChange={handleInputChange}
            />
            <input
              type="text"
              name="tags"
              placeholder="Tags (comma separated)"
              className="w-full p-4 bg-gray-50 rounded-lg border border-gray-200 focus:border-purple-400 focus:ring-2 focus:ring-purple-100"
              value={formData.tags}
              onChange={handleInputChange}
            />
          </div>
          <div className="relative group">
            <input
              type="file"
              name="postimage"
              onChange={handleImageChange}
              className="absolute opacity-0 w-full h-full cursor-pointer"
              id="image-upload"
              accept="image/*"
            />
            <label
              htmlFor="image-upload"
              className="block p-8 text-center border-2 border-dashed border-gray-200 rounded-lg bg-gray-50 hover:border-purple-300 group-active:border-purple-400 transition-colors cursor-pointer"
            >
              <UploadIcon className="w-8 h-8 text-purple-500 mx-auto" />
              <p className="text-gray-600 font-medium">Drag & drop or click to upload</p>
              <p className="text-sm text-gray-400">PNG, JPG up to 5MB</p>
            </label>
          </div>
        </div>

        {previewImage && (
          <div className="mb-6 relative group">
            <img src={previewImage} alt="Preview" className="w-full h-48 object-cover rounded-xl border border-gray-100 shadow-sm transition-transform group-hover:scale-105" />
            <button
              type="button"
              onClick={() => setPreviewImage(null)}
              className="absolute top-2 right-2 p-2 bg-white/90 backdrop-blur-sm rounded-full shadow-sm hover:shadow-md transition-all"
            >
              <XIcon className="w-5 h-5 text-gray-600" />
            </button>
          </div>
        )}

        <div className="flex justify-between items-center pt-4 border-t border-gray-100">
          <button
            type="button"
            onClick={handleClearForm}
            className="px-5 py-2.5 text-gray-500 hover:text-gray-700 transition-colors flex items-center gap-2"
          >
            <XIcon className="w-5 h-5" />
            Clear Form
          </button>
          <Button
            type="submit"
            className="bg-gradient-to-br from-purple-600 to-orange-600 hover:from-purple-700 hover:to-orange-700 text-white px-8 py-2.5 rounded-lg shadow-sm hover:shadow-lg transition-all"
            disabled={isSubmitting}
          >
            {isSubmitting ? "Publishing..." : "Publish Post"}
          </Button>
        </div>
      </div>
    </fetcher.Form>
  );
}


export { CreatePostCard };
